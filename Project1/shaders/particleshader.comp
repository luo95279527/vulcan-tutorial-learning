#version 450

struct Particle {
	vec3 position;
	vec3 velocity;
    vec4 color;
};

layout (binding = 0) uniform ParameterUBO {
    float deltaTime;

    float left;
    float right;
    float bottom;
    float top;
    float front;
    float back;

    float radius;
} ubo;

layout(std140, binding = 1) readonly buffer ParticleSSBOIn {
   Particle particlesIn[ ];
};

layout(std140, binding = 2) buffer ParticleSSBOOut {
   Particle particlesOut[ ];
};

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

void main() 
{
    uint index = gl_GlobalInvocationID.x;  

    Particle particleIn = particlesIn[index];

    vec3 newPos = particleIn.position + particleIn.velocity * ubo.deltaTime;
    vec3 newVel = particleIn.velocity;

    vec3 center = vec3(0.0);
    float dist = length(newPos - center);
    if (dist > ubo.radius) {
        vec3 dir = normalize(newPos - center);
        newVel = reflect(newVel, dir) * 0.8; // 可加阻尼
        newPos = dir * ubo.radius;
    }

    particlesOut[index].position = newPos;
    particlesOut[index].velocity = newVel;

    float distFinal = length(particlesOut[index].position - center);
    if (distFinal > ubo.radius) {
        vec3 dir = normalize(particlesOut[index].position - center);
        particlesOut[index].position = dir * ubo.radius;
    }
}